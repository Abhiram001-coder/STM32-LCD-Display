
String_Display_using_I2C_BUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002364  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800241c  0800241c  0001241c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002478  08002478  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002478  08002478  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002478  08002478  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002478  08002478  00012478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800247c  0800247c  0001247c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000010  08002490  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002490  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000780e  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001970  00000000  00000000  00027889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  00029200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000602  00000000  00000000  000299f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014baf  00000000  00000000  00029ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b049  00000000  00000000  0003eba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008087f  00000000  00000000  00049bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001af8  00000000  00000000  000ca46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000cbf64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002404 	.word	0x08002404

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08002404 	.word	0x08002404

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <PCF8574T_sendCommand4bit>:
static uint8_t addr_ = 0x27;
I2C_Write_Func write_func_ = NULL;
Delay_Func delay_func_ = NULL;

static void PCF8574T_sendCommand4bit(uint8_t command, bool is_control_data)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	0002      	movs	r2, r0
 8000220:	1dfb      	adds	r3, r7, #7
 8000222:	701a      	strb	r2, [r3, #0]
 8000224:	1dbb      	adds	r3, r7, #6
 8000226:	1c0a      	adds	r2, r1, #0
 8000228:	701a      	strb	r2, [r3, #0]
	uint8_t sendCommand[3];

	// Set Command (Toggle E Pin)
	sendCommand[0] = (command & 0x0F) << 4;
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	011b      	lsls	r3, r3, #4
 8000230:	b2da      	uxtb	r2, r3
 8000232:	210c      	movs	r1, #12
 8000234:	187b      	adds	r3, r7, r1
 8000236:	701a      	strb	r2, [r3, #0]
	sendCommand[1] = sendCommand[0] | 0b00000100;
 8000238:	187b      	adds	r3, r7, r1
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2204      	movs	r2, #4
 800023e:	4313      	orrs	r3, r2
 8000240:	b2da      	uxtb	r2, r3
 8000242:	187b      	adds	r3, r7, r1
 8000244:	705a      	strb	r2, [r3, #1]
	sendCommand[2] = sendCommand[0];
 8000246:	187b      	adds	r3, r7, r1
 8000248:	781a      	ldrb	r2, [r3, #0]
 800024a:	187b      	adds	r3, r7, r1
 800024c:	709a      	strb	r2, [r3, #2]

	// Set RS Pin
	if (!is_control_data)
 800024e:	1dbb      	adds	r3, r7, #6
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2201      	movs	r2, #1
 8000254:	4053      	eors	r3, r2
 8000256:	b2db      	uxtb	r3, r3
 8000258:	2b00      	cmp	r3, #0
 800025a:	d014      	beq.n	8000286 <PCF8574T_sendCommand4bit+0x6e>
	{
		sendCommand[0] |= 0b1;
 800025c:	187b      	adds	r3, r7, r1
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2201      	movs	r2, #1
 8000262:	4313      	orrs	r3, r2
 8000264:	b2da      	uxtb	r2, r3
 8000266:	187b      	adds	r3, r7, r1
 8000268:	701a      	strb	r2, [r3, #0]
		sendCommand[1] |= 0b1;
 800026a:	187b      	adds	r3, r7, r1
 800026c:	785b      	ldrb	r3, [r3, #1]
 800026e:	2201      	movs	r2, #1
 8000270:	4313      	orrs	r3, r2
 8000272:	b2da      	uxtb	r2, r3
 8000274:	187b      	adds	r3, r7, r1
 8000276:	705a      	strb	r2, [r3, #1]
		sendCommand[2] |= 0b1;
 8000278:	187b      	adds	r3, r7, r1
 800027a:	789b      	ldrb	r3, [r3, #2]
 800027c:	2201      	movs	r2, #1
 800027e:	4313      	orrs	r3, r2
 8000280:	b2da      	uxtb	r2, r3
 8000282:	187b      	adds	r3, r7, r1
 8000284:	709a      	strb	r2, [r3, #2]
	}

	// Set Backlight On
	sendCommand[0] |= 0b1000;
 8000286:	210c      	movs	r1, #12
 8000288:	187b      	adds	r3, r7, r1
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2208      	movs	r2, #8
 800028e:	4313      	orrs	r3, r2
 8000290:	b2da      	uxtb	r2, r3
 8000292:	187b      	adds	r3, r7, r1
 8000294:	701a      	strb	r2, [r3, #0]
	sendCommand[1] |= 0b1000;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	785b      	ldrb	r3, [r3, #1]
 800029a:	2208      	movs	r2, #8
 800029c:	4313      	orrs	r3, r2
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	705a      	strb	r2, [r3, #1]
	sendCommand[2] |= 0b1000;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	789b      	ldrb	r3, [r3, #2]
 80002a8:	2208      	movs	r2, #8
 80002aa:	4313      	orrs	r3, r2
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	709a      	strb	r2, [r3, #2]

	(*write_func_)(addr_, sendCommand, 3);
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <PCF8574T_sendCommand4bit+0xb8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <PCF8574T_sendCommand4bit+0xbc>)
 80002b8:	7810      	ldrb	r0, [r2, #0]
 80002ba:	1879      	adds	r1, r7, r1
 80002bc:	2203      	movs	r2, #3
 80002be:	4798      	blx	r3
	(*delay_func_)(1);
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <PCF8574T_sendCommand4bit+0xc0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2001      	movs	r0, #1
 80002c6:	4798      	blx	r3
}
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	46bd      	mov	sp, r7
 80002cc:	b004      	add	sp, #16
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000002c 	.word	0x2000002c
 80002d4:	20000000 	.word	0x20000000
 80002d8:	20000030 	.word	0x20000030

080002dc <PCF8574T_Init>:
// ----------------------------------------------
// Public Function
// ----------------------------------------------

void PCF8574T_Init(uint8_t i2c_addr, Delay_Func delay_func, I2C_Write_Func i2c_func)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60b9      	str	r1, [r7, #8]
 80002e4:	607a      	str	r2, [r7, #4]
 80002e6:	210f      	movs	r1, #15
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	1c02      	adds	r2, r0, #0
 80002ec:	701a      	strb	r2, [r3, #0]
	// set param
	addr_ = i2c_addr;
 80002ee:	4b1f      	ldr	r3, [pc, #124]	; (800036c <PCF8574T_Init+0x90>)
 80002f0:	187a      	adds	r2, r7, r1
 80002f2:	7812      	ldrb	r2, [r2, #0]
 80002f4:	701a      	strb	r2, [r3, #0]
	delay_func_ = delay_func;
 80002f6:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <PCF8574T_Init+0x94>)
 80002f8:	68ba      	ldr	r2, [r7, #8]
 80002fa:	601a      	str	r2, [r3, #0]
	write_func_ = i2c_func;
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <PCF8574T_Init+0x98>)
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	601a      	str	r2, [r3, #0]

	// init display
	(*delay_func_)(15);
 8000302:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <PCF8574T_Init+0x94>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	200f      	movs	r0, #15
 8000308:	4798      	blx	r3
	PCF8574T_sendCommand4bit(0b0011, true); // set 8bit mode
 800030a:	2101      	movs	r1, #1
 800030c:	2003      	movs	r0, #3
 800030e:	f7ff ff83 	bl	8000218 <PCF8574T_sendCommand4bit>
	(*delay_func_)(5);
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <PCF8574T_Init+0x94>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2005      	movs	r0, #5
 8000318:	4798      	blx	r3
	PCF8574T_sendCommand4bit(0b0011, true);
 800031a:	2101      	movs	r1, #1
 800031c:	2003      	movs	r0, #3
 800031e:	f7ff ff7b 	bl	8000218 <PCF8574T_sendCommand4bit>
	PCF8574T_sendCommand4bit(0b0011, true);
 8000322:	2101      	movs	r1, #1
 8000324:	2003      	movs	r0, #3
 8000326:	f7ff ff77 	bl	8000218 <PCF8574T_sendCommand4bit>
	PCF8574T_sendCommand4bit(0b0010, true);		// set 4bit mode
 800032a:	2101      	movs	r1, #1
 800032c:	2002      	movs	r0, #2
 800032e:	f7ff ff73 	bl	8000218 <PCF8574T_sendCommand4bit>
	PCF8574T_sendCommand8bit(0b00101000, true); // set 2line mode
 8000332:	2101      	movs	r1, #1
 8000334:	2028      	movs	r0, #40	; 0x28
 8000336:	f000 f854 	bl	80003e2 <PCF8574T_sendCommand8bit>
	PCF8574T_sendCommand8bit(0b00001100, true); // display On, cursor Off
 800033a:	2101      	movs	r1, #1
 800033c:	200c      	movs	r0, #12
 800033e:	f000 f850 	bl	80003e2 <PCF8574T_sendCommand8bit>
	PCF8574T_sendCommand8bit(0b00000001, true); // display clear
 8000342:	2101      	movs	r1, #1
 8000344:	2001      	movs	r0, #1
 8000346:	f000 f84c 	bl	80003e2 <PCF8574T_sendCommand8bit>
	(*delay_func_)(2);
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <PCF8574T_Init+0x94>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2002      	movs	r0, #2
 8000350:	4798      	blx	r3
	PCF8574T_sendCommand8bit(0b00000110, true); // set entry mode
 8000352:	2101      	movs	r1, #1
 8000354:	2006      	movs	r0, #6
 8000356:	f000 f844 	bl	80003e2 <PCF8574T_sendCommand8bit>
	PCF8574T_sendCommand8bit(0b00000010, true); // move cursor to Home
 800035a:	2101      	movs	r1, #1
 800035c:	2002      	movs	r0, #2
 800035e:	f000 f840 	bl	80003e2 <PCF8574T_sendCommand8bit>
}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	b004      	add	sp, #16
 8000368:	bd80      	pop	{r7, pc}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	20000000 	.word	0x20000000
 8000370:	20000030 	.word	0x20000030
 8000374:	2000002c 	.word	0x2000002c

08000378 <PCF8574T_displayString>:

void PCF8574T_displayString(char *string, uint8_t line)
{
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	000a      	movs	r2, r1
 8000382:	1cfb      	adds	r3, r7, #3
 8000384:	701a      	strb	r2, [r3, #0]
	if (line == 1)
 8000386:	1cfb      	adds	r3, r7, #3
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d104      	bne.n	8000398 <PCF8574T_displayString+0x20>
	{
		PCF8574T_sendCommand8bit(0b10000000, true); // line 1
 800038e:	2101      	movs	r1, #1
 8000390:	2080      	movs	r0, #128	; 0x80
 8000392:	f000 f826 	bl	80003e2 <PCF8574T_sendCommand8bit>
 8000396:	e003      	b.n	80003a0 <PCF8574T_displayString+0x28>
	}
	else
	{
		PCF8574T_sendCommand8bit(0b11000000, true); // line 2
 8000398:	2101      	movs	r1, #1
 800039a:	20c0      	movs	r0, #192	; 0xc0
 800039c:	f000 f821 	bl	80003e2 <PCF8574T_sendCommand8bit>
	}

	uint8_t i = 0;
 80003a0:	230f      	movs	r3, #15
 80003a2:	18fb      	adds	r3, r7, r3
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]
	while (string[i] != '\0')
 80003a8:	e00e      	b.n	80003c8 <PCF8574T_displayString+0x50>
	{
		PCF8574T_sendCommand8bit(string[i], false);
 80003aa:	240f      	movs	r4, #15
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	18d3      	adds	r3, r2, r3
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2100      	movs	r1, #0
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 f812 	bl	80003e2 <PCF8574T_sendCommand8bit>
		++i;
 80003be:	193b      	adds	r3, r7, r4
 80003c0:	193a      	adds	r2, r7, r4
 80003c2:	7812      	ldrb	r2, [r2, #0]
 80003c4:	3201      	adds	r2, #1
 80003c6:	701a      	strb	r2, [r3, #0]
	while (string[i] != '\0')
 80003c8:	230f      	movs	r3, #15
 80003ca:	18fb      	adds	r3, r7, r3
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	18d3      	adds	r3, r2, r3
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d1e8      	bne.n	80003aa <PCF8574T_displayString+0x32>
	}
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b005      	add	sp, #20
 80003e0:	bd90      	pop	{r4, r7, pc}

080003e2 <PCF8574T_sendCommand8bit>:

void PCF8574T_sendCommand8bit(uint8_t command, bool is_control_data)
{
 80003e2:	b590      	push	{r4, r7, lr}
 80003e4:	b085      	sub	sp, #20
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	0002      	movs	r2, r0
 80003ea:	1dfb      	adds	r3, r7, #7
 80003ec:	701a      	strb	r2, [r3, #0]
 80003ee:	1dbb      	adds	r3, r7, #6
 80003f0:	1c0a      	adds	r2, r1, #0
 80003f2:	701a      	strb	r2, [r3, #0]
	uint8_t upperData = (command & 0xF0) >> 4;
 80003f4:	200f      	movs	r0, #15
 80003f6:	183b      	adds	r3, r7, r0
 80003f8:	1dfa      	adds	r2, r7, #7
 80003fa:	7812      	ldrb	r2, [r2, #0]
 80003fc:	0912      	lsrs	r2, r2, #4
 80003fe:	701a      	strb	r2, [r3, #0]
	uint8_t lowerData = command & 0x0F;
 8000400:	240e      	movs	r4, #14
 8000402:	193b      	adds	r3, r7, r4
 8000404:	1dfa      	adds	r2, r7, #7
 8000406:	7812      	ldrb	r2, [r2, #0]
 8000408:	210f      	movs	r1, #15
 800040a:	400a      	ands	r2, r1
 800040c:	701a      	strb	r2, [r3, #0]
	PCF8574T_sendCommand4bit(upperData, is_control_data);
 800040e:	1dbb      	adds	r3, r7, #6
 8000410:	781a      	ldrb	r2, [r3, #0]
 8000412:	183b      	adds	r3, r7, r0
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	0011      	movs	r1, r2
 8000418:	0018      	movs	r0, r3
 800041a:	f7ff fefd 	bl	8000218 <PCF8574T_sendCommand4bit>
	PCF8574T_sendCommand4bit(lowerData, is_control_data);
 800041e:	1dbb      	adds	r3, r7, #6
 8000420:	781a      	ldrb	r2, [r3, #0]
 8000422:	193b      	adds	r3, r7, r4
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff fef5 	bl	8000218 <PCF8574T_sendCommand4bit>
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b005      	add	sp, #20
 8000434:	bd90      	pop	{r4, r7, pc}
	...

08000438 <main>:
uint8_t send_data_len1;
uint8_t send_data_len2;


int main(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b089      	sub	sp, #36	; 0x24
 800043c:	af00      	add	r7, sp, #0
	char outString1[] = "Hello Gotham!!!";
 800043e:	2310      	movs	r3, #16
 8000440:	18fb      	adds	r3, r7, r3
 8000442:	4a1e      	ldr	r2, [pc, #120]	; (80004bc <main+0x84>)
 8000444:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000446:	c313      	stmia	r3!, {r0, r1, r4}
 8000448:	6812      	ldr	r2, [r2, #0]
 800044a:	601a      	str	r2, [r3, #0]
	char outString2[]= "I'm Batman";
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4a1c      	ldr	r2, [pc, #112]	; (80004c0 <main+0x88>)
 8000450:	ca03      	ldmia	r2!, {r0, r1}
 8000452:	c303      	stmia	r3!, {r0, r1}
 8000454:	8811      	ldrh	r1, [r2, #0]
 8000456:	8019      	strh	r1, [r3, #0]
 8000458:	7892      	ldrb	r2, [r2, #2]
 800045a:	709a      	strb	r2, [r3, #2]
	send_data_len1=sizeof(outString1);
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <main+0x8c>)
 800045e:	2210      	movs	r2, #16
 8000460:	701a      	strb	r2, [r3, #0]
	send_data_len2=sizeof(outString2);
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <main+0x90>)
 8000464:	220b      	movs	r2, #11
 8000466:	701a      	strb	r2, [r3, #0]


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000468:	f000 fa14 	bl	8000894 <HAL_Init>

  // For configuring the system clock
  SystemClock_Config();
 800046c:	f000 f834 	bl	80004d8 <SystemClock_Config>

  // Initialize all configured peripherals
  MX_GPIO_Init();
 8000470:	f000 f8ba 	bl	80005e8 <MX_GPIO_Init>
  //Step 2: Initialize the HAL_DRIVER for I2C1 peripheral (Which initializes all the parameters such as clock speed, duty cycle, addressing mode of MCU maybe 7 bit or 10 bit addressing)
  MX_I2C1_Init();
 8000474:	f000 f878 	bl	8000568 <MX_I2C1_Init>

  //Step 3: Function call to the pcf8674t driver for initialization --> Follow 3rd argument stm_i2c_write for step 4
  PCF8574T_Init(0x27,stm_delay, stm_i2c_write1);
 8000478:	4a14      	ldr	r2, [pc, #80]	; (80004cc <main+0x94>)
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <main+0x98>)
 800047c:	0019      	movs	r1, r3
 800047e:	2027      	movs	r0, #39	; 0x27
 8000480:	f7ff ff2c 	bl	80002dc <PCF8574T_Init>
  PCF8574T_Init(0x27,stm_delay, stm_i2c_write2);
 8000484:	4a13      	ldr	r2, [pc, #76]	; (80004d4 <main+0x9c>)
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <main+0x98>)
 8000488:	0019      	movs	r1, r3
 800048a:	2027      	movs	r0, #39	; 0x27
 800048c:	f7ff ff26 	bl	80002dc <PCF8574T_Init>
  {
     /** Step 5: Displaying the string
      * first argument indicates the data we need to pass
      * second argument indicates the line we are going to print on the LCD display
      */
	  PCF8574T_displayString(outString1,1);
 8000490:	2310      	movs	r3, #16
 8000492:	18fb      	adds	r3, r7, r3
 8000494:	2101      	movs	r1, #1
 8000496:	0018      	movs	r0, r3
 8000498:	f7ff ff6e 	bl	8000378 <PCF8574T_displayString>
	  HAL_Delay(1000);
 800049c:	23fa      	movs	r3, #250	; 0xfa
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 fa7d 	bl	80009a0 <HAL_Delay>
	  PCF8574T_displayString(outString2,2);
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2102      	movs	r1, #2
 80004aa:	0018      	movs	r0, r3
 80004ac:	f7ff ff64 	bl	8000378 <PCF8574T_displayString>
	  HAL_Delay(1000);
 80004b0:	23fa      	movs	r3, #250	; 0xfa
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fa73 	bl	80009a0 <HAL_Delay>
	  PCF8574T_displayString(outString1,1);
 80004ba:	e7e9      	b.n	8000490 <main+0x58>
 80004bc:	0800241c 	.word	0x0800241c
 80004c0:	0800242c 	.word	0x0800242c
 80004c4:	20000088 	.word	0x20000088
 80004c8:	20000089 	.word	0x20000089
 80004cc:	08000645 	.word	0x08000645
 80004d0:	080006cd 	.word	0x080006cd
 80004d4:	08000689 	.word	0x08000689

080004d8 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b093      	sub	sp, #76	; 0x4c
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	2414      	movs	r4, #20
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	0018      	movs	r0, r3
 80004e4:	2334      	movs	r3, #52	; 0x34
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f001 ff5f 	bl	80023ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	0018      	movs	r0, r3
 80004f2:	2310      	movs	r3, #16
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f001 ff58 	bl	80023ac <memset>


  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	0018      	movs	r0, r3
 8000502:	f001 f945 	bl	8001790 <HAL_PWREx_ControlVoltageScaling>


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2202      	movs	r2, #2
 800050a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	0052      	lsls	r2, r2, #1
 8000512:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2240      	movs	r2, #64	; 0x40
 800051e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	193b      	adds	r3, r7, r4
 8000528:	0018      	movs	r0, r3
 800052a:	f001 f971 	bl	8001810 <HAL_RCC_OscConfig>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000532:	f000 f8da 	bl	80006ea <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2207      	movs	r2, #7
 800053a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2100      	movs	r1, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f001 fc6c 	bl	8001e30 <HAL_RCC_ClockConfig>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800055c:	f000 f8c5 	bl	80006ea <Error_Handler>
  }
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b013      	add	sp, #76	; 0x4c
 8000566:	bd90      	pop	{r4, r7, pc}

08000568 <MX_I2C1_Init>:


static void MX_I2C1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0


  hi2c1.Instance = I2C1;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <MX_I2C1_Init+0x74>)
 800056e:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <MX_I2C1_Init+0x78>)
 8000570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <MX_I2C1_Init+0x74>)
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <MX_I2C1_Init+0x7c>)
 8000576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_I2C1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_I2C1_Init+0x74>)
 8000580:	2201      	movs	r2, #1
 8000582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_I2C1_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_I2C1_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <MX_I2C1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_I2C1_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_I2C1_Init+0x74>)
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fc4d 	bl	8000e44 <HAL_I2C_Init>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ae:	f000 f89c 	bl	80006ea <Error_Handler>
  }


  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <MX_I2C1_Init+0x74>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 f852 	bl	8001660 <HAL_I2CEx_ConfigAnalogFilter>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005c0:	f000 f893 	bl	80006ea <Error_Handler>
  }


  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <MX_I2C1_Init+0x74>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 f895 	bl	80016f8 <HAL_I2CEx_ConfigDigitalFilter>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005d2:	f000 f88a 	bl	80006ea <Error_Handler>
  }


}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000034 	.word	0x20000034
 80005e0:	40005400 	.word	0x40005400
 80005e4:	00303d5b 	.word	0x00303d5b

080005e8 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_GPIO_Init+0x58>)
 80005f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MX_GPIO_Init+0x58>)
 80005f4:	2104      	movs	r1, #4
 80005f6:	430a      	orrs	r2, r1
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_GPIO_Init+0x58>)
 80005fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fe:	2204      	movs	r2, #4
 8000600:	4013      	ands	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_GPIO_Init+0x58>)
 8000608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <MX_GPIO_Init+0x58>)
 800060c:	2120      	movs	r1, #32
 800060e:	430a      	orrs	r2, r1
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_GPIO_Init+0x58>)
 8000614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000616:	2220      	movs	r2, #32
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_GPIO_Init+0x58>)
 8000620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_GPIO_Init+0x58>)
 8000624:	2101      	movs	r1, #1
 8000626:	430a      	orrs	r2, r1
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <MX_GPIO_Init+0x58>)
 800062c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800062e:	2201      	movs	r2, #1
 8000630:	4013      	ands	r3, r2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]


}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b004      	add	sp, #16
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	40021000 	.word	0x40021000

08000644 <stm_i2c_write1>:
 * Step 4: 1st argument as slave address
 *         2nd argument as pointer which points the data buffer that we use to send the data
 *         3rd argument length of data
 */
void stm_i2c_write1(uint8_t addr, uint8_t *pData, uint8_t send_data_len1)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b085      	sub	sp, #20
 8000648:	af02      	add	r7, sp, #8
 800064a:	6039      	str	r1, [r7, #0]
 800064c:	0011      	movs	r1, r2
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	1c02      	adds	r2, r0, #0
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	1dbb      	adds	r3, r7, #6
 8000656:	1c0a      	adds	r2, r1, #0
 8000658:	701a      	strb	r2, [r3, #0]
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
	 */
    HAL_I2C_Master_Transmit(&hi2c1, addr<<1,pData, send_data_len1, 1000);
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b29b      	uxth	r3, r3
 8000660:	18db      	adds	r3, r3, r3
 8000662:	b299      	uxth	r1, r3
 8000664:	1dbb      	adds	r3, r7, #6
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b29c      	uxth	r4, r3
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <stm_i2c_write1+0x40>)
 800066e:	23fa      	movs	r3, #250	; 0xfa
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	0023      	movs	r3, r4
 8000676:	f000 fc8b 	bl	8000f90 <HAL_I2C_Master_Transmit>
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b003      	add	sp, #12
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	20000034 	.word	0x20000034

08000688 <stm_i2c_write2>:
void stm_i2c_write2(uint8_t addr, uint8_t *pData, uint8_t send_data_len2)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b085      	sub	sp, #20
 800068c:	af02      	add	r7, sp, #8
 800068e:	6039      	str	r1, [r7, #0]
 8000690:	0011      	movs	r1, r2
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	1c02      	adds	r2, r0, #0
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	1dbb      	adds	r3, r7, #6
 800069a:	1c0a      	adds	r2, r1, #0
 800069c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, addr<<1,pData, send_data_len2, 1000);
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	18db      	adds	r3, r3, r3
 80006a6:	b299      	uxth	r1, r3
 80006a8:	1dbb      	adds	r3, r7, #6
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b29c      	uxth	r4, r3
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <stm_i2c_write2+0x40>)
 80006b2:	23fa      	movs	r3, #250	; 0xfa
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	0023      	movs	r3, r4
 80006ba:	f000 fc69 	bl	8000f90 <HAL_I2C_Master_Transmit>
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b003      	add	sp, #12
 80006c4:	bd90      	pop	{r4, r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000034 	.word	0x20000034

080006cc <stm_delay>:
void stm_delay(uint16_t delay_ms)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	0002      	movs	r2, r0
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	801a      	strh	r2, [r3, #0]
    HAL_Delay(delay_ms);
 80006d8:	1dbb      	adds	r3, r7, #6
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 f95f 	bl	80009a0 <HAL_Delay>
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}

080006ea <Error_Handler>:


void Error_Handler(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ee:	b672      	cpsid	i
}
 80006f0:	46c0      	nop			; (mov r8, r8)

  __disable_irq();
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <Error_Handler+0x8>

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <HAL_MspInit+0x4c>)
 80006fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <HAL_MspInit+0x4c>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	641a      	str	r2, [r3, #64]	; 0x40
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <HAL_MspInit+0x4c>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <HAL_MspInit+0x4c>)
 8000714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_MspInit+0x4c>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0549      	lsls	r1, r1, #21
 800071c:	430a      	orrs	r2, r1
 800071e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <HAL_MspInit+0x4c>)
 8000722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	055b      	lsls	r3, r3, #21
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800072e:	23c0      	movs	r3, #192	; 0xc0
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	0018      	movs	r0, r3
 8000734:	f000 f958 	bl	80009e8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b002      	add	sp, #8
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000

08000744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b091      	sub	sp, #68	; 0x44
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	232c      	movs	r3, #44	; 0x2c
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	0018      	movs	r0, r3
 8000752:	2314      	movs	r3, #20
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f001 fe28 	bl	80023ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075c:	2410      	movs	r4, #16
 800075e:	193b      	adds	r3, r7, r4
 8000760:	0018      	movs	r0, r3
 8000762:	231c      	movs	r3, #28
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f001 fe20 	bl	80023ac <memset>
  if(hi2c->Instance==I2C1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a23      	ldr	r2, [pc, #140]	; (8000800 <HAL_I2C_MspInit+0xbc>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d13f      	bne.n	80007f6 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2220      	movs	r2, #32
 800077a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000782:	193b      	adds	r3, r7, r4
 8000784:	0018      	movs	r0, r3
 8000786:	f001 fcdd 	bl	8002144 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800078e:	f7ff ffac 	bl	80006ea <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <HAL_I2C_MspInit+0xc0>)
 8000794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <HAL_I2C_MspInit+0xc0>)
 8000798:	2101      	movs	r1, #1
 800079a:	430a      	orrs	r2, r1
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_I2C_MspInit+0xc0>)
 80007a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a2:	2201      	movs	r2, #1
 80007a4:	4013      	ands	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007aa:	212c      	movs	r1, #44	; 0x2c
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	22c0      	movs	r2, #192	; 0xc0
 80007b0:	00d2      	lsls	r2, r2, #3
 80007b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2212      	movs	r2, #18
 80007b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2206      	movs	r2, #6
 80007ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	187a      	adds	r2, r7, r1
 80007ce:	23a0      	movs	r3, #160	; 0xa0
 80007d0:	05db      	lsls	r3, r3, #23
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 f9d1 	bl	8000b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_I2C_MspInit+0xc0>)
 80007dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_I2C_MspInit+0xc0>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	0389      	lsls	r1, r1, #14
 80007e4:	430a      	orrs	r2, r1
 80007e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_I2C_MspInit+0xc0>)
 80007ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	039b      	lsls	r3, r3, #14
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b011      	add	sp, #68	; 0x44
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40005400 	.word	0x40005400
 8000804:	40021000 	.word	0x40021000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082c:	f000 f89c 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000842:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000844:	f7ff fff7 	bl	8000836 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	; (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	; (800088c <LoopForever+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800086e:	f001 fda5 	bl	80023bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000872:	f7ff fde1 	bl	8000438 <main>

08000876 <LoopForever>:

LoopForever:
  b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   r0, =_estack
 8000878:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000884:	08002480 	.word	0x08002480
  ldr r2, =_sbss
 8000888:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800088c:	20000090 	.word	0x20000090

08000890 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_IRQHandler>
	...

08000894 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_Init+0x3c>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_Init+0x3c>)
 80008a6:	2180      	movs	r1, #128	; 0x80
 80008a8:	0049      	lsls	r1, r1, #1
 80008aa:	430a      	orrs	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 f810 	bl	80008d4 <HAL_InitTick>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d003      	beq.n	80008c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008b8:	1dfb      	adds	r3, r7, #7
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e001      	b.n	80008c4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80008c0:	f7ff ff18 	bl	80006f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	781b      	ldrb	r3, [r3, #0]
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40022000 	.word	0x40022000

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008dc:	230f      	movs	r3, #15
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <HAL_InitTick+0x88>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d02b      	beq.n	8000944 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_InitTick+0x8c>)
 80008ee:	681c      	ldr	r4, [r3, #0]
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <HAL_InitTick+0x88>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	0019      	movs	r1, r3
 80008f6:	23fa      	movs	r3, #250	; 0xfa
 80008f8:	0098      	lsls	r0, r3, #2
 80008fa:	f7ff fc01 	bl	8000100 <__udivsi3>
 80008fe:	0003      	movs	r3, r0
 8000900:	0019      	movs	r1, r3
 8000902:	0020      	movs	r0, r4
 8000904:	f7ff fbfc 	bl	8000100 <__udivsi3>
 8000908:	0003      	movs	r3, r0
 800090a:	0018      	movs	r0, r3
 800090c:	f000 f929 	bl	8000b62 <HAL_SYSTICK_Config>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d112      	bne.n	800093a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d80a      	bhi.n	8000930 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	2301      	movs	r3, #1
 800091e:	425b      	negs	r3, r3
 8000920:	2200      	movs	r2, #0
 8000922:	0018      	movs	r0, r3
 8000924:	f000 f908 	bl	8000b38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_InitTick+0x90>)
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	e00d      	b.n	800094c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000930:	230f      	movs	r3, #15
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e008      	b.n	800094c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800093a:	230f      	movs	r3, #15
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	e003      	b.n	800094c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000944:	230f      	movs	r3, #15
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800094c:	230f      	movs	r3, #15
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	781b      	ldrb	r3, [r3, #0]
}
 8000952:	0018      	movs	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	b005      	add	sp, #20
 8000958:	bd90      	pop	{r4, r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	2000000c 	.word	0x2000000c
 8000960:	20000004 	.word	0x20000004
 8000964:	20000008 	.word	0x20000008

08000968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x1c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	001a      	movs	r2, r3
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <HAL_IncTick+0x20>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	18d2      	adds	r2, r2, r3
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_IncTick+0x20>)
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	2000000c 	.word	0x2000000c
 8000988:	2000008c 	.word	0x2000008c

0800098c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  return uwTick;
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <HAL_GetTick+0x10>)
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	2000008c 	.word	0x2000008c

080009a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a8:	f7ff fff0 	bl	800098c <HAL_GetTick>
 80009ac:	0003      	movs	r3, r0
 80009ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3301      	adds	r3, #1
 80009b8:	d005      	beq.n	80009c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_Delay+0x44>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	001a      	movs	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	189b      	adds	r3, r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	f7ff ffe0 	bl	800098c <HAL_GetTick>
 80009cc:	0002      	movs	r2, r0
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8f7      	bhi.n	80009c8 <HAL_Delay+0x28>
  {
  }
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b004      	add	sp, #16
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	2000000c 	.word	0x2000000c

080009e8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80009f6:	4013      	ands	r3, r2
 80009f8:	0019      	movs	r1, r3
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	601a      	str	r2, [r3, #0]
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b002      	add	sp, #8
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	40010000 	.word	0x40010000
 8000a10:	fffff9ff 	.word	0xfffff9ff

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b7f      	cmp	r3, #127	; 0x7f
 8000a28:	d828      	bhi.n	8000a7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ae8 <__NVIC_SetPriority+0xd4>)
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	33c0      	adds	r3, #192	; 0xc0
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	589b      	ldr	r3, [r3, r2]
 8000a3a:	1dfa      	adds	r2, r7, #7
 8000a3c:	7812      	ldrb	r2, [r2, #0]
 8000a3e:	0011      	movs	r1, r2
 8000a40:	2203      	movs	r2, #3
 8000a42:	400a      	ands	r2, r1
 8000a44:	00d2      	lsls	r2, r2, #3
 8000a46:	21ff      	movs	r1, #255	; 0xff
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	000a      	movs	r2, r1
 8000a4c:	43d2      	mvns	r2, r2
 8000a4e:	401a      	ands	r2, r3
 8000a50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	019b      	lsls	r3, r3, #6
 8000a56:	22ff      	movs	r2, #255	; 0xff
 8000a58:	401a      	ands	r2, r3
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	0018      	movs	r0, r3
 8000a60:	2303      	movs	r3, #3
 8000a62:	4003      	ands	r3, r0
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a68:	481f      	ldr	r0, [pc, #124]	; (8000ae8 <__NVIC_SetPriority+0xd4>)
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	089b      	lsrs	r3, r3, #2
 8000a72:	430a      	orrs	r2, r1
 8000a74:	33c0      	adds	r3, #192	; 0xc0
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a7a:	e031      	b.n	8000ae0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <__NVIC_SetPriority+0xd8>)
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	0019      	movs	r1, r3
 8000a84:	230f      	movs	r3, #15
 8000a86:	400b      	ands	r3, r1
 8000a88:	3b08      	subs	r3, #8
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	3306      	adds	r3, #6
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	3304      	adds	r3, #4
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	1dfa      	adds	r2, r7, #7
 8000a98:	7812      	ldrb	r2, [r2, #0]
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	400a      	ands	r2, r1
 8000aa0:	00d2      	lsls	r2, r2, #3
 8000aa2:	21ff      	movs	r1, #255	; 0xff
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	000a      	movs	r2, r1
 8000aa8:	43d2      	mvns	r2, r2
 8000aaa:	401a      	ands	r2, r3
 8000aac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	019b      	lsls	r3, r3, #6
 8000ab2:	22ff      	movs	r2, #255	; 0xff
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0018      	movs	r0, r3
 8000abc:	2303      	movs	r3, #3
 8000abe:	4003      	ands	r3, r0
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <__NVIC_SetPriority+0xd8>)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	001c      	movs	r4, r3
 8000acc:	230f      	movs	r3, #15
 8000ace:	4023      	ands	r3, r4
 8000ad0:	3b08      	subs	r3, #8
 8000ad2:	089b      	lsrs	r3, r3, #2
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	3306      	adds	r3, #6
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	18c3      	adds	r3, r0, r3
 8000adc:	3304      	adds	r3, #4
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b003      	add	sp, #12
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	1e5a      	subs	r2, r3, #1
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	045b      	lsls	r3, r3, #17
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d301      	bcc.n	8000b08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b04:	2301      	movs	r3, #1
 8000b06:	e010      	b.n	8000b2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <SysTick_Config+0x44>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b10:	2301      	movs	r3, #1
 8000b12:	425b      	negs	r3, r3
 8000b14:	2103      	movs	r1, #3
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff ff7c 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <SysTick_Config+0x44>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <SysTick_Config+0x44>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	210f      	movs	r1, #15
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	1c02      	adds	r2, r0, #0
 8000b48:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff ff5d 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b004      	add	sp, #16
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff ffbf 	bl	8000af0 <SysTick_Config>
 8000b72:	0003      	movs	r3, r0
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8a:	e147      	b.n	8000e1c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2101      	movs	r1, #1
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	4091      	lsls	r1, r2
 8000b96:	000a      	movs	r2, r1
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d100      	bne.n	8000ba4 <HAL_GPIO_Init+0x28>
 8000ba2:	e138      	b.n	8000e16 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2203      	movs	r2, #3
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d005      	beq.n	8000bbc <HAL_GPIO_Init+0x40>
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d130      	bne.n	8000c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	43da      	mvns	r2, r3
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	409a      	lsls	r2, r3
 8000bde:	0013      	movs	r3, r2
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	2201      	movs	r2, #1
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2203      	movs	r2, #3
 8000c24:	4013      	ands	r3, r2
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d017      	beq.n	8000c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	0013      	movs	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2203      	movs	r2, #3
 8000c60:	4013      	ands	r3, r2
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d123      	bne.n	8000cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	0092      	lsls	r2, r2, #2
 8000c70:	58d3      	ldr	r3, [r2, r3]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	2207      	movs	r2, #7
 8000c78:	4013      	ands	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	43da      	mvns	r2, r3
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	2107      	movs	r1, #7
 8000c92:	400b      	ands	r3, r1
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	08da      	lsrs	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	6939      	ldr	r1, [r7, #16]
 8000cac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2203      	movs	r2, #3
 8000ccc:	401a      	ands	r2, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	23c0      	movs	r3, #192	; 0xc0
 8000ce8:	029b      	lsls	r3, r3, #10
 8000cea:	4013      	ands	r3, r2
 8000cec:	d100      	bne.n	8000cf0 <HAL_GPIO_Init+0x174>
 8000cee:	e092      	b.n	8000e16 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000cf0:	4a50      	ldr	r2, [pc, #320]	; (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	089b      	lsrs	r3, r3, #2
 8000cf6:	3318      	adds	r3, #24
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	589b      	ldr	r3, [r3, r2]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2203      	movs	r2, #3
 8000d02:	4013      	ands	r3, r2
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	220f      	movs	r2, #15
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	0013      	movs	r3, r2
 8000d0c:	43da      	mvns	r2, r3
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	23a0      	movs	r3, #160	; 0xa0
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d013      	beq.n	8000d46 <HAL_GPIO_Init+0x1ca>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a45      	ldr	r2, [pc, #276]	; (8000e38 <HAL_GPIO_Init+0x2bc>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d00d      	beq.n	8000d42 <HAL_GPIO_Init+0x1c6>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a44      	ldr	r2, [pc, #272]	; (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d007      	beq.n	8000d3e <HAL_GPIO_Init+0x1c2>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a43      	ldr	r2, [pc, #268]	; (8000e40 <HAL_GPIO_Init+0x2c4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d101      	bne.n	8000d3a <HAL_GPIO_Init+0x1be>
 8000d36:	2303      	movs	r3, #3
 8000d38:	e006      	b.n	8000d48 <HAL_GPIO_Init+0x1cc>
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	e004      	b.n	8000d48 <HAL_GPIO_Init+0x1cc>
 8000d3e:	2302      	movs	r3, #2
 8000d40:	e002      	b.n	8000d48 <HAL_GPIO_Init+0x1cc>
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <HAL_GPIO_Init+0x1cc>
 8000d46:	2300      	movs	r3, #0
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	2103      	movs	r1, #3
 8000d4c:	400a      	ands	r2, r1
 8000d4e:	00d2      	lsls	r2, r2, #3
 8000d50:	4093      	lsls	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d58:	4936      	ldr	r1, [pc, #216]	; (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	3318      	adds	r3, #24
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d66:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	035b      	lsls	r3, r3, #13
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d90:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	43da      	mvns	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	039b      	lsls	r3, r3, #14
 8000da8:	4013      	ands	r3, r2
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dba:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000dbc:	2384      	movs	r3, #132	; 0x84
 8000dbe:	58d3      	ldr	r3, [r2, r3]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	43da      	mvns	r2, r3
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	029b      	lsls	r3, r3, #10
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000de0:	4914      	ldr	r1, [pc, #80]	; (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000de2:	2284      	movs	r2, #132	; 0x84
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000de8:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	58d3      	ldr	r3, [r2, r3]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	025b      	lsls	r3, r3, #9
 8000e02:	4013      	ands	r3, r2
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e0e:	4909      	ldr	r1, [pc, #36]	; (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	40da      	lsrs	r2, r3
 8000e24:	1e13      	subs	r3, r2, #0
 8000e26:	d000      	beq.n	8000e2a <HAL_GPIO_Init+0x2ae>
 8000e28:	e6b0      	b.n	8000b8c <HAL_GPIO_Init+0x10>
  }
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b006      	add	sp, #24
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40021800 	.word	0x40021800
 8000e38:	50000400 	.word	0x50000400
 8000e3c:	50000800 	.word	0x50000800
 8000e40:	50000c00 	.word	0x50000c00

08000e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e08f      	b.n	8000f76 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2241      	movs	r2, #65	; 0x41
 8000e5a:	5c9b      	ldrb	r3, [r3, r2]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d107      	bne.n	8000e72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2240      	movs	r2, #64	; 0x40
 8000e66:	2100      	movs	r1, #0
 8000e68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff fc69 	bl	8000744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2241      	movs	r2, #65	; 0x41
 8000e76:	2124      	movs	r1, #36	; 0x24
 8000e78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2101      	movs	r1, #1
 8000e86:	438a      	bics	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	493b      	ldr	r1, [pc, #236]	; (8000f80 <HAL_I2C_Init+0x13c>)
 8000e94:	400a      	ands	r2, r1
 8000e96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4938      	ldr	r1, [pc, #224]	; (8000f84 <HAL_I2C_Init+0x140>)
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d108      	bne.n	8000ec2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	0209      	lsls	r1, r1, #8
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	e007      	b.n	8000ed2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2184      	movs	r1, #132	; 0x84
 8000ecc:	0209      	lsls	r1, r1, #8
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d109      	bne.n	8000eee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	0109      	lsls	r1, r1, #4
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	e007      	b.n	8000efe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4923      	ldr	r1, [pc, #140]	; (8000f88 <HAL_I2C_Init+0x144>)
 8000efa:	400a      	ands	r2, r1
 8000efc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4920      	ldr	r1, [pc, #128]	; (8000f8c <HAL_I2C_Init+0x148>)
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	491a      	ldr	r1, [pc, #104]	; (8000f84 <HAL_I2C_Init+0x140>)
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	691a      	ldr	r2, [r3, #16]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	431a      	orrs	r2, r3
 8000f28:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69d9      	ldr	r1, [r3, #28]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a1a      	ldr	r2, [r3, #32]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2101      	movs	r1, #1
 8000f54:	430a      	orrs	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2241      	movs	r2, #65	; 0x41
 8000f62:	2120      	movs	r1, #32
 8000f64:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2242      	movs	r2, #66	; 0x42
 8000f70:	2100      	movs	r1, #0
 8000f72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	0018      	movs	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	f0ffffff 	.word	0xf0ffffff
 8000f84:	ffff7fff 	.word	0xffff7fff
 8000f88:	fffff7ff 	.word	0xfffff7ff
 8000f8c:	02008000 	.word	0x02008000

08000f90 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	0008      	movs	r0, r1
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	0019      	movs	r1, r3
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	18fb      	adds	r3, r7, r3
 8000fa2:	1c02      	adds	r2, r0, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	1c0a      	adds	r2, r1, #0
 8000fac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2241      	movs	r2, #65	; 0x41
 8000fb2:	5c9b      	ldrb	r3, [r3, r2]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b20      	cmp	r3, #32
 8000fb8:	d000      	beq.n	8000fbc <HAL_I2C_Master_Transmit+0x2c>
 8000fba:	e10a      	b.n	80011d2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2240      	movs	r2, #64	; 0x40
 8000fc0:	5c9b      	ldrb	r3, [r3, r2]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <HAL_I2C_Master_Transmit+0x3a>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e104      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x244>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2240      	movs	r2, #64	; 0x40
 8000fce:	2101      	movs	r1, #1
 8000fd0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fd2:	f7ff fcdb 	bl	800098c <HAL_GetTick>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	0219      	lsls	r1, r3, #8
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2319      	movs	r3, #25
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f000 f91e 	bl	8001228 <I2C_WaitOnFlagUntilTimeout>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e0ef      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2241      	movs	r2, #65	; 0x41
 8000ff8:	2121      	movs	r1, #33	; 0x21
 8000ffa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2242      	movs	r2, #66	; 0x42
 8001000:	2110      	movs	r1, #16
 8001002:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2208      	movs	r2, #8
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	8812      	ldrh	r2, [r2, #0]
 8001018:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2200      	movs	r2, #0
 800101e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001024:	b29b      	uxth	r3, r3
 8001026:	2bff      	cmp	r3, #255	; 0xff
 8001028:	d906      	bls.n	8001038 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	22ff      	movs	r2, #255	; 0xff
 800102e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	045b      	lsls	r3, r3, #17
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e007      	b.n	8001048 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800103c:	b29a      	uxth	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	049b      	lsls	r3, r3, #18
 8001046:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104c:	2b00      	cmp	r3, #0
 800104e:	d027      	beq.n	80010a0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	781a      	ldrb	r2, [r3, #0]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800106a:	b29b      	uxth	r3, r3
 800106c:	3b01      	subs	r3, #1
 800106e:	b29a      	uxth	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001078:	3b01      	subs	r3, #1
 800107a:	b29a      	uxth	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001084:	b2db      	uxtb	r3, r3
 8001086:	3301      	adds	r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	697c      	ldr	r4, [r7, #20]
 800108c:	230a      	movs	r3, #10
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	8819      	ldrh	r1, [r3, #0]
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	4b51      	ldr	r3, [pc, #324]	; (80011dc <HAL_I2C_Master_Transmit+0x24c>)
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	0023      	movs	r3, r4
 800109a:	f000 faa7 	bl	80015ec <I2C_TransferConfig>
 800109e:	e06f      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	697c      	ldr	r4, [r7, #20]
 80010a8:	230a      	movs	r3, #10
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	8819      	ldrh	r1, [r3, #0]
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	4b4a      	ldr	r3, [pc, #296]	; (80011dc <HAL_I2C_Master_Transmit+0x24c>)
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	0023      	movs	r3, r4
 80010b6:	f000 fa99 	bl	80015ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80010ba:	e061      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	0018      	movs	r0, r3
 80010c4:	f000 f908 	bl	80012d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80010c8:	1e03      	subs	r3, r0, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e081      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	3b01      	subs	r3, #1
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001104:	b29b      	uxth	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d03a      	beq.n	8001180 <HAL_I2C_Master_Transmit+0x1f0>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110e:	2b00      	cmp	r3, #0
 8001110:	d136      	bne.n	8001180 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	0013      	movs	r3, r2
 800111c:	2200      	movs	r2, #0
 800111e:	2180      	movs	r1, #128	; 0x80
 8001120:	f000 f882 	bl	8001228 <I2C_WaitOnFlagUntilTimeout>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e053      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001130:	b29b      	uxth	r3, r3
 8001132:	2bff      	cmp	r3, #255	; 0xff
 8001134:	d911      	bls.n	800115a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	22ff      	movs	r2, #255	; 0xff
 800113a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001140:	b2da      	uxtb	r2, r3
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	045c      	lsls	r4, r3, #17
 8001146:	230a      	movs	r3, #10
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	8819      	ldrh	r1, [r3, #0]
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	2300      	movs	r3, #0
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	0023      	movs	r3, r4
 8001154:	f000 fa4a 	bl	80015ec <I2C_TransferConfig>
 8001158:	e012      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800115e:	b29a      	uxth	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001168:	b2da      	uxtb	r2, r3
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	049c      	lsls	r4, r3, #18
 800116e:	230a      	movs	r3, #10
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	8819      	ldrh	r1, [r3, #0]
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	2300      	movs	r3, #0
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	0023      	movs	r3, r4
 800117c:	f000 fa36 	bl	80015ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001184:	b29b      	uxth	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d198      	bne.n	80010bc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	0018      	movs	r0, r3
 8001192:	f000 f8e7 	bl	8001364 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d001      	beq.n	800119e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e01a      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2220      	movs	r2, #32
 80011a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	490b      	ldr	r1, [pc, #44]	; (80011e0 <HAL_I2C_Master_Transmit+0x250>)
 80011b2:	400a      	ands	r2, r1
 80011b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2241      	movs	r2, #65	; 0x41
 80011ba:	2120      	movs	r1, #32
 80011bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2242      	movs	r2, #66	; 0x42
 80011c2:	2100      	movs	r1, #0
 80011c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2240      	movs	r2, #64	; 0x40
 80011ca:	2100      	movs	r1, #0
 80011cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80011d2:	2302      	movs	r3, #2
  }
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b007      	add	sp, #28
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	80002000 	.word	0x80002000
 80011e0:	fe00e800 	.word	0xfe00e800

080011e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d103      	bne.n	8001202 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	2201      	movs	r2, #1
 800120a:	4013      	ands	r3, r2
 800120c:	2b01      	cmp	r3, #1
 800120e:	d007      	beq.n	8001220 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	699a      	ldr	r2, [r3, #24]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2101      	movs	r1, #1
 800121c:	430a      	orrs	r2, r1
 800121e:	619a      	str	r2, [r3, #24]
  }
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}

08001228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001238:	e03a      	b.n	80012b0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	0018      	movs	r0, r3
 8001242:	f000 f8d3 	bl	80013ec <I2C_IsErrorOccurred>
 8001246:	1e03      	subs	r3, r0, #0
 8001248:	d001      	beq.n	800124e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e040      	b.n	80012d0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	d02d      	beq.n	80012b0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001254:	f7ff fb9a 	bl	800098c <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d302      	bcc.n	800126a <I2C_WaitOnFlagUntilTimeout+0x42>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d122      	bne.n	80012b0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	4013      	ands	r3, r2
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	425a      	negs	r2, r3
 800127a:	4153      	adcs	r3, r2
 800127c:	b2db      	uxtb	r3, r3
 800127e:	001a      	movs	r2, r3
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d113      	bne.n	80012b0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	2220      	movs	r2, #32
 800128e:	431a      	orrs	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2241      	movs	r2, #65	; 0x41
 8001298:	2120      	movs	r1, #32
 800129a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2242      	movs	r2, #66	; 0x42
 80012a0:	2100      	movs	r1, #0
 80012a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2240      	movs	r2, #64	; 0x40
 80012a8:	2100      	movs	r1, #0
 80012aa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e00f      	b.n	80012d0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	4013      	ands	r3, r2
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	425a      	negs	r2, r3
 80012c0:	4153      	adcs	r3, r2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	001a      	movs	r2, r3
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d0b5      	beq.n	800123a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b004      	add	sp, #16
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012e4:	e032      	b.n	800134c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	0018      	movs	r0, r3
 80012ee:	f000 f87d 	bl	80013ec <I2C_IsErrorOccurred>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d001      	beq.n	80012fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e030      	b.n	800135c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	3301      	adds	r3, #1
 80012fe:	d025      	beq.n	800134c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001300:	f7ff fb44 	bl	800098c <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	429a      	cmp	r2, r3
 800130e:	d302      	bcc.n	8001316 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d11a      	bne.n	800134c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	2202      	movs	r2, #2
 800131e:	4013      	ands	r3, r2
 8001320:	2b02      	cmp	r3, #2
 8001322:	d013      	beq.n	800134c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	2220      	movs	r2, #32
 800132a:	431a      	orrs	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2241      	movs	r2, #65	; 0x41
 8001334:	2120      	movs	r1, #32
 8001336:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2242      	movs	r2, #66	; 0x42
 800133c:	2100      	movs	r1, #0
 800133e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2240      	movs	r2, #64	; 0x40
 8001344:	2100      	movs	r1, #0
 8001346:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e007      	b.n	800135c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	2202      	movs	r2, #2
 8001354:	4013      	ands	r3, r2
 8001356:	2b02      	cmp	r3, #2
 8001358:	d1c5      	bne.n	80012e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b004      	add	sp, #16
 8001362:	bd80      	pop	{r7, pc}

08001364 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001370:	e02f      	b.n	80013d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	0018      	movs	r0, r3
 800137a:	f000 f837 	bl	80013ec <I2C_IsErrorOccurred>
 800137e:	1e03      	subs	r3, r0, #0
 8001380:	d001      	beq.n	8001386 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e02d      	b.n	80013e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001386:	f7ff fb01 	bl	800098c <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	429a      	cmp	r2, r3
 8001394:	d302      	bcc.n	800139c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d11a      	bne.n	80013d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	2220      	movs	r2, #32
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b20      	cmp	r3, #32
 80013a8:	d013      	beq.n	80013d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	2220      	movs	r2, #32
 80013b0:	431a      	orrs	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2241      	movs	r2, #65	; 0x41
 80013ba:	2120      	movs	r1, #32
 80013bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2242      	movs	r2, #66	; 0x42
 80013c2:	2100      	movs	r1, #0
 80013c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e007      	b.n	80013e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	2220      	movs	r2, #32
 80013da:	4013      	ands	r3, r2
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d1c8      	bne.n	8001372 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b08b      	sub	sp, #44	; 0x2c
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f8:	2327      	movs	r3, #39	; 0x27
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2210      	movs	r2, #16
 8001414:	4013      	ands	r3, r2
 8001416:	d100      	bne.n	800141a <I2C_IsErrorOccurred+0x2e>
 8001418:	e082      	b.n	8001520 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2210      	movs	r2, #16
 8001420:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001422:	e060      	b.n	80014e6 <I2C_IsErrorOccurred+0xfa>
 8001424:	2427      	movs	r4, #39	; 0x27
 8001426:	193b      	adds	r3, r7, r4
 8001428:	193a      	adds	r2, r7, r4
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	3301      	adds	r3, #1
 8001432:	d058      	beq.n	80014e6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001434:	f7ff faaa 	bl	800098c <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	429a      	cmp	r2, r3
 8001442:	d306      	bcc.n	8001452 <I2C_IsErrorOccurred+0x66>
 8001444:	193b      	adds	r3, r7, r4
 8001446:	193a      	adds	r2, r7, r4
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d149      	bne.n	80014e6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	01db      	lsls	r3, r3, #7
 800145c:	4013      	ands	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001460:	2013      	movs	r0, #19
 8001462:	183b      	adds	r3, r7, r0
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	2142      	movs	r1, #66	; 0x42
 8001468:	5c52      	ldrb	r2, [r2, r1]
 800146a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699a      	ldr	r2, [r3, #24]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	401a      	ands	r2, r3
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	429a      	cmp	r2, r3
 800147e:	d126      	bne.n	80014ce <I2C_IsErrorOccurred+0xe2>
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	01db      	lsls	r3, r3, #7
 8001486:	429a      	cmp	r2, r3
 8001488:	d021      	beq.n	80014ce <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800148a:	183b      	adds	r3, r7, r0
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b20      	cmp	r3, #32
 8001490:	d01d      	beq.n	80014ce <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	01c9      	lsls	r1, r1, #7
 80014a0:	430a      	orrs	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80014a4:	f7ff fa72 	bl	800098c <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014ac:	e00f      	b.n	80014ce <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80014ae:	f7ff fa6d 	bl	800098c <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b19      	cmp	r3, #25
 80014ba:	d908      	bls.n	80014ce <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	2220      	movs	r2, #32
 80014c0:	4313      	orrs	r3, r2
 80014c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80014c4:	2327      	movs	r3, #39	; 0x27
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]

              break;
 80014cc:	e00b      	b.n	80014e6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2220      	movs	r2, #32
 80014d6:	4013      	ands	r3, r2
 80014d8:	2127      	movs	r1, #39	; 0x27
 80014da:	187a      	adds	r2, r7, r1
 80014dc:	1879      	adds	r1, r7, r1
 80014de:	7809      	ldrb	r1, [r1, #0]
 80014e0:	7011      	strb	r1, [r2, #0]
 80014e2:	2b20      	cmp	r3, #32
 80014e4:	d1e3      	bne.n	80014ae <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2220      	movs	r2, #32
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b20      	cmp	r3, #32
 80014f2:	d004      	beq.n	80014fe <I2C_IsErrorOccurred+0x112>
 80014f4:	2327      	movs	r3, #39	; 0x27
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d092      	beq.n	8001424 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80014fe:	2327      	movs	r3, #39	; 0x27
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d103      	bne.n	8001510 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2220      	movs	r2, #32
 800150e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	2204      	movs	r2, #4
 8001514:	4313      	orrs	r3, r2
 8001516:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001518:	2327      	movs	r3, #39	; 0x27
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4013      	ands	r3, r2
 8001530:	d00c      	beq.n	800154c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	2201      	movs	r2, #1
 8001536:	4313      	orrs	r3, r2
 8001538:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001544:	2327      	movs	r3, #39	; 0x27
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4013      	ands	r3, r2
 8001554:	d00c      	beq.n	8001570 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	2208      	movs	r2, #8
 800155a:	4313      	orrs	r3, r2
 800155c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	00d2      	lsls	r2, r2, #3
 8001566:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001568:	2327      	movs	r3, #39	; 0x27
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4013      	ands	r3, r2
 8001578:	d00c      	beq.n	8001594 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	2202      	movs	r2, #2
 800157e:	4313      	orrs	r3, r2
 8001580:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2280      	movs	r2, #128	; 0x80
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800158c:	2327      	movs	r3, #39	; 0x27
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001594:	2327      	movs	r3, #39	; 0x27
 8001596:	18fb      	adds	r3, r7, r3
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d01d      	beq.n	80015da <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff fe1f 	bl	80011e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	490d      	ldr	r1, [pc, #52]	; (80015e8 <I2C_IsErrorOccurred+0x1fc>)
 80015b2:	400a      	ands	r2, r1
 80015b4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	431a      	orrs	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2241      	movs	r2, #65	; 0x41
 80015c6:	2120      	movs	r1, #32
 80015c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2242      	movs	r2, #66	; 0x42
 80015ce:	2100      	movs	r1, #0
 80015d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2240      	movs	r2, #64	; 0x40
 80015d6:	2100      	movs	r1, #0
 80015d8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80015da:	2327      	movs	r3, #39	; 0x27
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	781b      	ldrb	r3, [r3, #0]
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b00b      	add	sp, #44	; 0x2c
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	fe00e800 	.word	0xfe00e800

080015ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	0008      	movs	r0, r1
 80015f6:	0011      	movs	r1, r2
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	240a      	movs	r4, #10
 80015fc:	193b      	adds	r3, r7, r4
 80015fe:	1c02      	adds	r2, r0, #0
 8001600:	801a      	strh	r2, [r3, #0]
 8001602:	2009      	movs	r0, #9
 8001604:	183b      	adds	r3, r7, r0
 8001606:	1c0a      	adds	r2, r1, #0
 8001608:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800160a:	193b      	adds	r3, r7, r4
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	059b      	lsls	r3, r3, #22
 8001610:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001612:	183b      	adds	r3, r7, r0
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	0419      	lsls	r1, r3, #16
 8001618:	23ff      	movs	r3, #255	; 0xff
 800161a:	041b      	lsls	r3, r3, #16
 800161c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800161e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	4313      	orrs	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	085b      	lsrs	r3, r3, #1
 800162c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001636:	0d51      	lsrs	r1, r2, #21
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	00d2      	lsls	r2, r2, #3
 800163c:	400a      	ands	r2, r1
 800163e:	4907      	ldr	r1, [pc, #28]	; (800165c <I2C_TransferConfig+0x70>)
 8001640:	430a      	orrs	r2, r1
 8001642:	43d2      	mvns	r2, r2
 8001644:	401a      	ands	r2, r3
 8001646:	0011      	movs	r1, r2
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b007      	add	sp, #28
 8001658:	bd90      	pop	{r4, r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	03ff63ff 	.word	0x03ff63ff

08001660 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2241      	movs	r2, #65	; 0x41
 800166e:	5c9b      	ldrb	r3, [r3, r2]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b20      	cmp	r3, #32
 8001674:	d138      	bne.n	80016e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2240      	movs	r2, #64	; 0x40
 800167a:	5c9b      	ldrb	r3, [r3, r2]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001680:	2302      	movs	r3, #2
 8001682:	e032      	b.n	80016ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2240      	movs	r2, #64	; 0x40
 8001688:	2101      	movs	r1, #1
 800168a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2241      	movs	r2, #65	; 0x41
 8001690:	2124      	movs	r1, #36	; 0x24
 8001692:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2101      	movs	r1, #1
 80016a0:	438a      	bics	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4911      	ldr	r1, [pc, #68]	; (80016f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6819      	ldr	r1, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2101      	movs	r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2241      	movs	r2, #65	; 0x41
 80016d8:	2120      	movs	r1, #32
 80016da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2240      	movs	r2, #64	; 0x40
 80016e0:	2100      	movs	r1, #0
 80016e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e000      	b.n	80016ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016e8:	2302      	movs	r3, #2
  }
}
 80016ea:	0018      	movs	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b002      	add	sp, #8
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	ffffefff 	.word	0xffffefff

080016f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2241      	movs	r2, #65	; 0x41
 8001706:	5c9b      	ldrb	r3, [r3, r2]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b20      	cmp	r3, #32
 800170c:	d139      	bne.n	8001782 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2240      	movs	r2, #64	; 0x40
 8001712:	5c9b      	ldrb	r3, [r3, r2]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001718:	2302      	movs	r3, #2
 800171a:	e033      	b.n	8001784 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2240      	movs	r2, #64	; 0x40
 8001720:	2101      	movs	r1, #1
 8001722:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2241      	movs	r2, #65	; 0x41
 8001728:	2124      	movs	r1, #36	; 0x24
 800172a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2101      	movs	r1, #1
 8001738:	438a      	bics	r2, r1
 800173a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2241      	movs	r2, #65	; 0x41
 8001772:	2120      	movs	r1, #32
 8001774:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2240      	movs	r2, #64	; 0x40
 800177a:	2100      	movs	r1, #0
 800177c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001782:	2302      	movs	r3, #2
  }
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b004      	add	sp, #16
 800178a:	bd80      	pop	{r7, pc}
 800178c:	fffff0ff 	.word	0xfffff0ff

08001790 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800179e:	4013      	ands	r3, r2
 80017a0:	0019      	movs	r1, r3
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d11f      	bne.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	0013      	movs	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	189b      	adds	r3, r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4912      	ldr	r1, [pc, #72]	; (800180c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80017c2:	0018      	movs	r0, r3
 80017c4:	f7fe fc9c 	bl	8000100 <__udivsi3>
 80017c8:	0003      	movs	r3, r0
 80017ca:	3301      	adds	r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ce:	e008      	b.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3b01      	subs	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e001      	b.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e009      	b.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	401a      	ands	r2, r3
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d0ed      	beq.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	0018      	movs	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b004      	add	sp, #16
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40007000 	.word	0x40007000
 8001804:	fffff9ff 	.word	0xfffff9ff
 8001808:	20000004 	.word	0x20000004
 800180c:	000f4240 	.word	0x000f4240

08001810 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e2f3      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2201      	movs	r2, #1
 8001828:	4013      	ands	r3, r2
 800182a:	d100      	bne.n	800182e <HAL_RCC_OscConfig+0x1e>
 800182c:	e07c      	b.n	8001928 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182e:	4bc3      	ldr	r3, [pc, #780]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2238      	movs	r2, #56	; 0x38
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001838:	4bc0      	ldr	r3, [pc, #768]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2203      	movs	r2, #3
 800183e:	4013      	ands	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b10      	cmp	r3, #16
 8001846:	d102      	bne.n	800184e <HAL_RCC_OscConfig+0x3e>
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d002      	beq.n	8001854 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b08      	cmp	r3, #8
 8001852:	d10b      	bne.n	800186c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	4bb9      	ldr	r3, [pc, #740]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	029b      	lsls	r3, r3, #10
 800185c:	4013      	ands	r3, r2
 800185e:	d062      	beq.n	8001926 <HAL_RCC_OscConfig+0x116>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d15e      	bne.n	8001926 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e2ce      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	025b      	lsls	r3, r3, #9
 8001874:	429a      	cmp	r2, r3
 8001876:	d107      	bne.n	8001888 <HAL_RCC_OscConfig+0x78>
 8001878:	4bb0      	ldr	r3, [pc, #704]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4baf      	ldr	r3, [pc, #700]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	0249      	lsls	r1, r1, #9
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e020      	b.n	80018ca <HAL_RCC_OscConfig+0xba>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	23a0      	movs	r3, #160	; 0xa0
 800188e:	02db      	lsls	r3, r3, #11
 8001890:	429a      	cmp	r2, r3
 8001892:	d10e      	bne.n	80018b2 <HAL_RCC_OscConfig+0xa2>
 8001894:	4ba9      	ldr	r3, [pc, #676]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4ba8      	ldr	r3, [pc, #672]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800189a:	2180      	movs	r1, #128	; 0x80
 800189c:	02c9      	lsls	r1, r1, #11
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	4ba6      	ldr	r3, [pc, #664]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4ba5      	ldr	r3, [pc, #660]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	0249      	lsls	r1, r1, #9
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	e00b      	b.n	80018ca <HAL_RCC_OscConfig+0xba>
 80018b2:	4ba2      	ldr	r3, [pc, #648]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4ba1      	ldr	r3, [pc, #644]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018b8:	49a1      	ldr	r1, [pc, #644]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 80018ba:	400a      	ands	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	4b9f      	ldr	r3, [pc, #636]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b9e      	ldr	r3, [pc, #632]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018c4:	499f      	ldr	r1, [pc, #636]	; (8001b44 <HAL_RCC_OscConfig+0x334>)
 80018c6:	400a      	ands	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d014      	beq.n	80018fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff f85b 	bl	800098c <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff f856 	bl	800098c <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e28d      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ee:	4b93      	ldr	r3, [pc, #588]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	029b      	lsls	r3, r3, #10
 80018f6:	4013      	ands	r3, r2
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xcc>
 80018fa:	e015      	b.n	8001928 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f846 	bl	800098c <HAL_GetTick>
 8001900:	0003      	movs	r3, r0
 8001902:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001906:	f7ff f841 	bl	800098c <HAL_GetTick>
 800190a:	0002      	movs	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b64      	cmp	r3, #100	; 0x64
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e278      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001918:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	029b      	lsls	r3, r3, #10
 8001920:	4013      	ands	r3, r2
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0xf6>
 8001924:	e000      	b.n	8001928 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001926:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d100      	bne.n	8001934 <HAL_RCC_OscConfig+0x124>
 8001932:	e099      	b.n	8001a68 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001934:	4b81      	ldr	r3, [pc, #516]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2238      	movs	r2, #56	; 0x38
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193e:	4b7f      	ldr	r3, [pc, #508]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2203      	movs	r2, #3
 8001944:	4013      	ands	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b10      	cmp	r3, #16
 800194c:	d102      	bne.n	8001954 <HAL_RCC_OscConfig+0x144>
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d002      	beq.n	800195a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d135      	bne.n	80019c6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800195a:	4b78      	ldr	r3, [pc, #480]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4013      	ands	r3, r2
 8001964:	d005      	beq.n	8001972 <HAL_RCC_OscConfig+0x162>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e24b      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b72      	ldr	r3, [pc, #456]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a74      	ldr	r2, [pc, #464]	; (8001b48 <HAL_RCC_OscConfig+0x338>)
 8001978:	4013      	ands	r3, r2
 800197a:	0019      	movs	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	021a      	lsls	r2, r3, #8
 8001982:	4b6e      	ldr	r3, [pc, #440]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001984:	430a      	orrs	r2, r1
 8001986:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d112      	bne.n	80019b4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800198e:	4b6b      	ldr	r3, [pc, #428]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a6e      	ldr	r2, [pc, #440]	; (8001b4c <HAL_RCC_OscConfig+0x33c>)
 8001994:	4013      	ands	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80019a2:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0adb      	lsrs	r3, r3, #11
 80019a8:	2207      	movs	r2, #7
 80019aa:	4013      	ands	r3, r2
 80019ac:	4a68      	ldr	r2, [pc, #416]	; (8001b50 <HAL_RCC_OscConfig+0x340>)
 80019ae:	40da      	lsrs	r2, r3
 80019b0:	4b68      	ldr	r3, [pc, #416]	; (8001b54 <HAL_RCC_OscConfig+0x344>)
 80019b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019b4:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <HAL_RCC_OscConfig+0x348>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7fe ff8b 	bl	80008d4 <HAL_InitTick>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d051      	beq.n	8001a66 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e221      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d030      	beq.n	8001a30 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019ce:	4b5b      	ldr	r3, [pc, #364]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5e      	ldr	r2, [pc, #376]	; (8001b4c <HAL_RCC_OscConfig+0x33c>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	4b57      	ldr	r3, [pc, #348]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019e2:	4b56      	ldr	r3, [pc, #344]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b55      	ldr	r3, [pc, #340]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	0049      	lsls	r1, r1, #1
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7fe ffcc 	bl	800098c <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7fe ffc7 	bl	800098c <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1fe      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0c:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4013      	ands	r3, r2
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4a4a      	ldr	r2, [pc, #296]	; (8001b48 <HAL_RCC_OscConfig+0x338>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	0019      	movs	r1, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	021a      	lsls	r2, r3, #8
 8001a28:	4b44      	ldr	r3, [pc, #272]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	e01b      	b.n	8001a68 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a30:	4b42      	ldr	r3, [pc, #264]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a36:	4949      	ldr	r1, [pc, #292]	; (8001b5c <HAL_RCC_OscConfig+0x34c>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7fe ffa6 	bl	800098c <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a46:	f7fe ffa1 	bl	800098c <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1d8      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a58:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4013      	ands	r3, r2
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x236>
 8001a64:	e000      	b.n	8001a68 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d047      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2238      	movs	r2, #56	; 0x38
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b18      	cmp	r3, #24
 8001a7c:	d10a      	bne.n	8001a94 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d03c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d138      	bne.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e1ba      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d019      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7fe ff70 	bl	800098c <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7fe ff6b 	bl	800098c <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1a2      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac8:	2202      	movs	r2, #2
 8001aca:	4013      	ands	r3, r2
 8001acc:	d0f1      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x2a2>
 8001ace:	e018      	b.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	438a      	bics	r2, r1
 8001ada:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7fe ff56 	bl	800098c <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7fe ff51 	bl	800098c <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e188      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d1f1      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2204      	movs	r2, #4
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <HAL_RCC_OscConfig+0x2fe>
 8001b0c:	e0c6      	b.n	8001c9c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0e:	231f      	movs	r3, #31
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2238      	movs	r2, #56	; 0x38
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b20      	cmp	r3, #32
 8001b20:	d11e      	bne.n	8001b60 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d100      	bne.n	8001b2e <HAL_RCC_OscConfig+0x31e>
 8001b2c:	e0b6      	b.n	8001c9c <HAL_RCC_OscConfig+0x48c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d000      	beq.n	8001b38 <HAL_RCC_OscConfig+0x328>
 8001b36:	e0b1      	b.n	8001c9c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e166      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	fffeffff 	.word	0xfffeffff
 8001b44:	fffbffff 	.word	0xfffbffff
 8001b48:	ffff80ff 	.word	0xffff80ff
 8001b4c:	ffffc7ff 	.word	0xffffc7ff
 8001b50:	00f42400 	.word	0x00f42400
 8001b54:	20000004 	.word	0x20000004
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b60:	4bac      	ldr	r3, [pc, #688]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	055b      	lsls	r3, r3, #21
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_OscConfig+0x360>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x362>
 8001b70:	2300      	movs	r3, #0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d011      	beq.n	8001b9a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4ba7      	ldr	r3, [pc, #668]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b7a:	4ba6      	ldr	r3, [pc, #664]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	0549      	lsls	r1, r1, #21
 8001b80:	430a      	orrs	r2, r1
 8001b82:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b84:	4ba3      	ldr	r3, [pc, #652]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	055b      	lsls	r3, r3, #21
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b92:	231f      	movs	r3, #31
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9a:	4b9f      	ldr	r3, [pc, #636]	; (8001e18 <HAL_RCC_OscConfig+0x608>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d11a      	bne.n	8001bdc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ba6:	4b9c      	ldr	r3, [pc, #624]	; (8001e18 <HAL_RCC_OscConfig+0x608>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b9b      	ldr	r3, [pc, #620]	; (8001e18 <HAL_RCC_OscConfig+0x608>)
 8001bac:	2180      	movs	r1, #128	; 0x80
 8001bae:	0049      	lsls	r1, r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe feea 	bl	800098c <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbe:	f7fe fee5 	bl	800098c <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e11c      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd0:	4b91      	ldr	r3, [pc, #580]	; (8001e18 <HAL_RCC_OscConfig+0x608>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3e2>
 8001be4:	4b8b      	ldr	r3, [pc, #556]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001be6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001be8:	4b8a      	ldr	r3, [pc, #552]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	430a      	orrs	r2, r1
 8001bee:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bf0:	e01c      	b.n	8001c2c <HAL_RCC_OscConfig+0x41c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x404>
 8001bfa:	4b86      	ldr	r3, [pc, #536]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001bfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bfe:	4b85      	ldr	r3, [pc, #532]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001c00:	2104      	movs	r1, #4
 8001c02:	430a      	orrs	r2, r1
 8001c04:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c06:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001c08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c0a:	4b82      	ldr	r3, [pc, #520]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0x41c>
 8001c14:	4b7f      	ldr	r3, [pc, #508]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001c16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c18:	4b7e      	ldr	r3, [pc, #504]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c20:	4b7c      	ldr	r3, [pc, #496]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001c22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c24:	4b7b      	ldr	r3, [pc, #492]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001c26:	2104      	movs	r1, #4
 8001c28:	438a      	bics	r2, r1
 8001c2a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d014      	beq.n	8001c5e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7fe feaa 	bl	800098c <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3c:	e009      	b.n	8001c52 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7fe fea5 	bl	800098c <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	4a74      	ldr	r2, [pc, #464]	; (8001e1c <HAL_RCC_OscConfig+0x60c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0db      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c52:	4b70      	ldr	r3, [pc, #448]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2202      	movs	r2, #2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x42e>
 8001c5c:	e013      	b.n	8001c86 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7fe fe95 	bl	800098c <HAL_GetTick>
 8001c62:	0003      	movs	r3, r0
 8001c64:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c66:	e009      	b.n	8001c7c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7fe fe90 	bl	800098c <HAL_GetTick>
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	4a6a      	ldr	r2, [pc, #424]	; (8001e1c <HAL_RCC_OscConfig+0x60c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e0c6      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c7c:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	2202      	movs	r2, #2
 8001c82:	4013      	ands	r3, r2
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c86:	231f      	movs	r3, #31
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d105      	bne.n	8001c9c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c90:	4b60      	ldr	r3, [pc, #384]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c94:	4b5f      	ldr	r3, [pc, #380]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001c96:	4962      	ldr	r1, [pc, #392]	; (8001e20 <HAL_RCC_OscConfig+0x610>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d100      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x496>
 8001ca4:	e0b0      	b.n	8001e08 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca6:	4b5b      	ldr	r3, [pc, #364]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2238      	movs	r2, #56	; 0x38
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d100      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4a4>
 8001cb2:	e078      	b.n	8001da6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d153      	bne.n	8001d64 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbc:	4b55      	ldr	r3, [pc, #340]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b54      	ldr	r3, [pc, #336]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001cc2:	4958      	ldr	r1, [pc, #352]	; (8001e24 <HAL_RCC_OscConfig+0x614>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7fe fe60 	bl	800098c <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7fe fe5b 	bl	800098c <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e092      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce4:	4b4b      	ldr	r3, [pc, #300]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	049b      	lsls	r3, r3, #18
 8001cec:	4013      	ands	r3, r2
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf0:	4b48      	ldr	r3, [pc, #288]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a4c      	ldr	r2, [pc, #304]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1a      	ldr	r2, [r3, #32]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	431a      	orrs	r2, r3
 8001d18:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	0449      	lsls	r1, r1, #17
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	0549      	lsls	r1, r1, #21
 8001d36:	430a      	orrs	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7fe fe27 	bl	800098c <HAL_GetTick>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7fe fe22 	bl	800098c <HAL_GetTick>
 8001d48:	0002      	movs	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e059      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	049b      	lsls	r3, r3, #18
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x534>
 8001d62:	e051      	b.n	8001e08 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001d6a:	492e      	ldr	r1, [pc, #184]	; (8001e24 <HAL_RCC_OscConfig+0x614>)
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7fe fe0c 	bl	800098c <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7fe fe07 	bl	800098c <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e03e      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	049b      	lsls	r3, r3, #18
 8001d94:	4013      	ands	r3, r2
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001d9e:	4923      	ldr	r1, [pc, #140]	; (8001e2c <HAL_RCC_OscConfig+0x61c>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	e030      	b.n	8001e08 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e02b      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_RCC_OscConfig+0x604>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d11e      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2270      	movs	r2, #112	; 0x70
 8001dca:	401a      	ands	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d117      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	23fe      	movs	r3, #254	; 0xfe
 8001dd8:	01db      	lsls	r3, r3, #7
 8001dda:	401a      	ands	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d10e      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	23f8      	movs	r3, #248	; 0xf8
 8001dea:	039b      	lsls	r3, r3, #14
 8001dec:	401a      	ands	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d106      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	0f5b      	lsrs	r3, r3, #29
 8001dfa:	075a      	lsls	r2, r3, #29
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b008      	add	sp, #32
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	00001388 	.word	0x00001388
 8001e20:	efffffff 	.word	0xefffffff
 8001e24:	feffffff 	.word	0xfeffffff
 8001e28:	1fc1808c 	.word	0x1fc1808c
 8001e2c:	effefffc 	.word	0xeffefffc

08001e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0e9      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b76      	ldr	r3, [pc, #472]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2207      	movs	r2, #7
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d91e      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b73      	ldr	r3, [pc, #460]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2207      	movs	r2, #7
 8001e58:	4393      	bics	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	4b70      	ldr	r3, [pc, #448]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e64:	f7fe fd92 	bl	800098c <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e6c:	e009      	b.n	8001e82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6e:	f7fe fd8d 	bl	800098c <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	4a6a      	ldr	r2, [pc, #424]	; (8002024 <HAL_RCC_ClockConfig+0x1f4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e0ca      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2207      	movs	r2, #7
 8001e88:	4013      	ands	r3, r2
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d1ee      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d015      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d006      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ea4:	4b60      	ldr	r3, [pc, #384]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	4b5f      	ldr	r3, [pc, #380]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001eaa:	21e0      	movs	r1, #224	; 0xe0
 8001eac:	01c9      	lsls	r1, r1, #7
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	4a5d      	ldr	r2, [pc, #372]	; (800202c <HAL_RCC_ClockConfig+0x1fc>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d057      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed8:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	029b      	lsls	r3, r3, #10
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d12b      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e097      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d107      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef0:	4b4d      	ldr	r3, [pc, #308]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	049b      	lsls	r3, r3, #18
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d11f      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e08b      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f08:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4013      	ands	r3, r2
 8001f12:	d113      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e07f      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f20:	4b41      	ldr	r3, [pc, #260]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f24:	2202      	movs	r2, #2
 8001f26:	4013      	ands	r3, r2
 8001f28:	d108      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e074      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f32:	2202      	movs	r2, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e06d      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f3c:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2207      	movs	r2, #7
 8001f42:	4393      	bics	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4b37      	ldr	r3, [pc, #220]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f50:	f7fe fd1c 	bl	800098c <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f58:	e009      	b.n	8001f6e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5a:	f7fe fd17 	bl	800098c <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <HAL_RCC_ClockConfig+0x1f4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e054      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2238      	movs	r2, #56	; 0x38
 8001f74:	401a      	ands	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1ec      	bne.n	8001f5a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2207      	movs	r2, #7
 8001f86:	4013      	ands	r3, r2
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d21e      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2207      	movs	r2, #7
 8001f94:	4393      	bics	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa0:	f7fe fcf4 	bl	800098c <HAL_GetTick>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fa8:	e009      	b.n	8001fbe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001faa:	f7fe fcef 	bl	800098c <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	; (8002024 <HAL_RCC_ClockConfig+0x1f4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e02c      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1ee      	bne.n	8001faa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d009      	beq.n	8001fea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_RCC_ClockConfig+0x200>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fea:	f000 f829 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001fee:	0001      	movs	r1, r0
 8001ff0:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_RCC_ClockConfig+0x204>)
 8001ffc:	0092      	lsls	r2, r2, #2
 8001ffe:	58d3      	ldr	r3, [r2, r3]
 8002000:	221f      	movs	r2, #31
 8002002:	4013      	ands	r3, r2
 8002004:	000a      	movs	r2, r1
 8002006:	40da      	lsrs	r2, r3
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_ClockConfig+0x208>)
 800200a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_ClockConfig+0x20c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0018      	movs	r0, r3
 8002012:	f7fe fc5f 	bl	80008d4 <HAL_InitTick>
 8002016:	0003      	movs	r3, r0
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b004      	add	sp, #16
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40022000 	.word	0x40022000
 8002024:	00001388 	.word	0x00001388
 8002028:	40021000 	.word	0x40021000
 800202c:	fffff0ff 	.word	0xfffff0ff
 8002030:	ffff8fff 	.word	0xffff8fff
 8002034:	08002438 	.word	0x08002438
 8002038:	20000004 	.word	0x20000004
 800203c:	20000008 	.word	0x20000008

08002040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002046:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2238      	movs	r2, #56	; 0x38
 800204c:	4013      	ands	r3, r2
 800204e:	d10f      	bne.n	8002070 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002050:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0adb      	lsrs	r3, r3, #11
 8002056:	2207      	movs	r2, #7
 8002058:	4013      	ands	r3, r2
 800205a:	2201      	movs	r2, #1
 800205c:	409a      	lsls	r2, r3
 800205e:	0013      	movs	r3, r2
 8002060:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	4835      	ldr	r0, [pc, #212]	; (800213c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002066:	f7fe f84b 	bl	8000100 <__udivsi3>
 800206a:	0003      	movs	r3, r0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	e05d      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002070:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2238      	movs	r2, #56	; 0x38
 8002076:	4013      	ands	r3, r2
 8002078:	2b08      	cmp	r3, #8
 800207a:	d102      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800207c:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_RCC_GetSysClockFreq+0x100>)
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e054      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002082:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2238      	movs	r2, #56	; 0x38
 8002088:	4013      	ands	r3, r2
 800208a:	2b10      	cmp	r3, #16
 800208c:	d138      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2203      	movs	r2, #3
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	2207      	movs	r2, #7
 80020a0:	4013      	ands	r3, r2
 80020a2:	3301      	adds	r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d10d      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	4824      	ldr	r0, [pc, #144]	; (8002140 <HAL_RCC_GetSysClockFreq+0x100>)
 80020b0:	f7fe f826 	bl	8000100 <__udivsi3>
 80020b4:	0003      	movs	r3, r0
 80020b6:	0019      	movs	r1, r3
 80020b8:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	227f      	movs	r2, #127	; 0x7f
 80020c0:	4013      	ands	r3, r2
 80020c2:	434b      	muls	r3, r1
 80020c4:	617b      	str	r3, [r7, #20]
        break;
 80020c6:	e00d      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	481c      	ldr	r0, [pc, #112]	; (800213c <HAL_RCC_GetSysClockFreq+0xfc>)
 80020cc:	f7fe f818 	bl	8000100 <__udivsi3>
 80020d0:	0003      	movs	r3, r0
 80020d2:	0019      	movs	r1, r3
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	227f      	movs	r2, #127	; 0x7f
 80020dc:	4013      	ands	r3, r2
 80020de:	434b      	muls	r3, r1
 80020e0:	617b      	str	r3, [r7, #20]
        break;
 80020e2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0f5b      	lsrs	r3, r3, #29
 80020ea:	2207      	movs	r2, #7
 80020ec:	4013      	ands	r3, r2
 80020ee:	3301      	adds	r3, #1
 80020f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	6978      	ldr	r0, [r7, #20]
 80020f6:	f7fe f803 	bl	8000100 <__udivsi3>
 80020fa:	0003      	movs	r3, r0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	e015      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2238      	movs	r2, #56	; 0x38
 8002106:	4013      	ands	r3, r2
 8002108:	2b20      	cmp	r3, #32
 800210a:	d103      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	e00b      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2238      	movs	r2, #56	; 0x38
 800211a:	4013      	ands	r3, r2
 800211c:	2b18      	cmp	r3, #24
 800211e:	d103      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002120:	23fa      	movs	r3, #250	; 0xfa
 8002122:	01db      	lsls	r3, r3, #7
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	e001      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800212c:	693b      	ldr	r3, [r7, #16]
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b006      	add	sp, #24
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	40021000 	.word	0x40021000
 800213c:	00f42400 	.word	0x00f42400
 8002140:	007a1200 	.word	0x007a1200

08002144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800214c:	2313      	movs	r3, #19
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002154:	2312      	movs	r3, #18
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	029b      	lsls	r3, r3, #10
 8002164:	4013      	ands	r3, r2
 8002166:	d100      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002168:	e0a3      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216a:	2011      	movs	r0, #17
 800216c:	183b      	adds	r3, r7, r0
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b86      	ldr	r3, [pc, #536]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	055b      	lsls	r3, r3, #21
 800217a:	4013      	ands	r3, r2
 800217c:	d110      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b83      	ldr	r3, [pc, #524]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002182:	4b82      	ldr	r3, [pc, #520]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	0549      	lsls	r1, r1, #21
 8002188:	430a      	orrs	r2, r1
 800218a:	63da      	str	r2, [r3, #60]	; 0x3c
 800218c:	4b7f      	ldr	r3, [pc, #508]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800218e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	055b      	lsls	r3, r3, #21
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	183b      	adds	r3, r7, r0
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a0:	4b7b      	ldr	r3, [pc, #492]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b7a      	ldr	r3, [pc, #488]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	0049      	lsls	r1, r1, #1
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ae:	f7fe fbed 	bl	800098c <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021b6:	e00b      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe fbe8 	bl	800098c <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d904      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80021c6:	2313      	movs	r3, #19
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	2203      	movs	r2, #3
 80021cc:	701a      	strb	r2, [r3, #0]
        break;
 80021ce:	e005      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d0:	4b6f      	ldr	r3, [pc, #444]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4013      	ands	r3, r2
 80021da:	d0ed      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80021dc:	2313      	movs	r3, #19
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d154      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021e6:	4b69      	ldr	r3, [pc, #420]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021ea:	23c0      	movs	r3, #192	; 0xc0
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4013      	ands	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d019      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d014      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002202:	4b62      	ldr	r3, [pc, #392]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002206:	4a63      	ldr	r2, [pc, #396]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002208:	4013      	ands	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800220c:	4b5f      	ldr	r3, [pc, #380]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800220e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002210:	4b5e      	ldr	r3, [pc, #376]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	0249      	lsls	r1, r1, #9
 8002216:	430a      	orrs	r2, r1
 8002218:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800221a:	4b5c      	ldr	r3, [pc, #368]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800221c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800221e:	4b5b      	ldr	r3, [pc, #364]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002220:	495d      	ldr	r1, [pc, #372]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002222:	400a      	ands	r2, r1
 8002224:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002226:	4b59      	ldr	r3, [pc, #356]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2201      	movs	r2, #1
 8002230:	4013      	ands	r3, r2
 8002232:	d016      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fbaa 	bl	800098c <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223c:	e00c      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7fe fba5 	bl	800098c <HAL_GetTick>
 8002242:	0002      	movs	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	4a54      	ldr	r2, [pc, #336]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d904      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800224e:	2313      	movs	r3, #19
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2203      	movs	r2, #3
 8002254:	701a      	strb	r2, [r3, #0]
            break;
 8002256:	e004      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002258:	4b4c      	ldr	r3, [pc, #304]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800225a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225c:	2202      	movs	r2, #2
 800225e:	4013      	ands	r3, r2
 8002260:	d0ed      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002262:	2313      	movs	r3, #19
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800226c:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	4a48      	ldr	r2, [pc, #288]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	4b44      	ldr	r3, [pc, #272]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800227c:	430a      	orrs	r2, r1
 800227e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002280:	e00c      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002282:	2312      	movs	r3, #18
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	2213      	movs	r2, #19
 8002288:	18ba      	adds	r2, r7, r2
 800228a:	7812      	ldrb	r2, [r2, #0]
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	e005      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002290:	2312      	movs	r3, #18
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2213      	movs	r2, #19
 8002296:	18ba      	adds	r2, r7, r2
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800229c:	2311      	movs	r3, #17
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a6:	4b39      	ldr	r3, [pc, #228]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022aa:	4b38      	ldr	r3, [pc, #224]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022ac:	493c      	ldr	r1, [pc, #240]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80022ae:	400a      	ands	r2, r1
 80022b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2201      	movs	r2, #1
 80022b8:	4013      	ands	r3, r2
 80022ba:	d009      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022bc:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	2203      	movs	r2, #3
 80022c2:	4393      	bics	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022cc:	430a      	orrs	r2, r1
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2202      	movs	r2, #2
 80022d6:	4013      	ands	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022de:	220c      	movs	r2, #12
 80022e0:	4393      	bics	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	4b28      	ldr	r3, [pc, #160]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022ea:	430a      	orrs	r2, r1
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2220      	movs	r2, #32
 80022f4:	4013      	ands	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	4a29      	ldr	r2, [pc, #164]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	4013      	ands	r3, r2
 8002300:	0019      	movs	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002308:	430a      	orrs	r2, r1
 800230a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	01db      	lsls	r3, r3, #7
 8002314:	4013      	ands	r3, r2
 8002316:	d015      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	0899      	lsrs	r1, r3, #2
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002326:	430a      	orrs	r2, r1
 8002328:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	05db      	lsls	r3, r3, #23
 8002332:	429a      	cmp	r2, r3
 8002334:	d106      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0249      	lsls	r1, r1, #9
 8002340:	430a      	orrs	r2, r1
 8002342:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	4013      	ands	r3, r2
 800234e:	d016      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002356:	4013      	ands	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002360:	430a      	orrs	r2, r1
 8002362:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	01db      	lsls	r3, r3, #7
 800236c:	429a      	cmp	r2, r3
 800236e:	d106      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	0249      	lsls	r1, r1, #9
 800237a:	430a      	orrs	r2, r1
 800237c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800237e:	2312      	movs	r3, #18
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	781b      	ldrb	r3, [r3, #0]
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	b006      	add	sp, #24
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	40007000 	.word	0x40007000
 8002394:	fffffcff 	.word	0xfffffcff
 8002398:	fffeffff 	.word	0xfffeffff
 800239c:	00001388 	.word	0x00001388
 80023a0:	efffffff 	.word	0xefffffff
 80023a4:	ffffcfff 	.word	0xffffcfff
 80023a8:	ffff3fff 	.word	0xffff3fff

080023ac <memset>:
 80023ac:	0003      	movs	r3, r0
 80023ae:	1882      	adds	r2, r0, r2
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d100      	bne.n	80023b6 <memset+0xa>
 80023b4:	4770      	bx	lr
 80023b6:	7019      	strb	r1, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	e7f9      	b.n	80023b0 <memset+0x4>

080023bc <__libc_init_array>:
 80023bc:	b570      	push	{r4, r5, r6, lr}
 80023be:	2600      	movs	r6, #0
 80023c0:	4c0c      	ldr	r4, [pc, #48]	; (80023f4 <__libc_init_array+0x38>)
 80023c2:	4d0d      	ldr	r5, [pc, #52]	; (80023f8 <__libc_init_array+0x3c>)
 80023c4:	1b64      	subs	r4, r4, r5
 80023c6:	10a4      	asrs	r4, r4, #2
 80023c8:	42a6      	cmp	r6, r4
 80023ca:	d109      	bne.n	80023e0 <__libc_init_array+0x24>
 80023cc:	2600      	movs	r6, #0
 80023ce:	f000 f819 	bl	8002404 <_init>
 80023d2:	4c0a      	ldr	r4, [pc, #40]	; (80023fc <__libc_init_array+0x40>)
 80023d4:	4d0a      	ldr	r5, [pc, #40]	; (8002400 <__libc_init_array+0x44>)
 80023d6:	1b64      	subs	r4, r4, r5
 80023d8:	10a4      	asrs	r4, r4, #2
 80023da:	42a6      	cmp	r6, r4
 80023dc:	d105      	bne.n	80023ea <__libc_init_array+0x2e>
 80023de:	bd70      	pop	{r4, r5, r6, pc}
 80023e0:	00b3      	lsls	r3, r6, #2
 80023e2:	58eb      	ldr	r3, [r5, r3]
 80023e4:	4798      	blx	r3
 80023e6:	3601      	adds	r6, #1
 80023e8:	e7ee      	b.n	80023c8 <__libc_init_array+0xc>
 80023ea:	00b3      	lsls	r3, r6, #2
 80023ec:	58eb      	ldr	r3, [r5, r3]
 80023ee:	4798      	blx	r3
 80023f0:	3601      	adds	r6, #1
 80023f2:	e7f2      	b.n	80023da <__libc_init_array+0x1e>
 80023f4:	08002478 	.word	0x08002478
 80023f8:	08002478 	.word	0x08002478
 80023fc:	0800247c 	.word	0x0800247c
 8002400:	08002478 	.word	0x08002478

08002404 <_init>:
 8002404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240a:	bc08      	pop	{r3}
 800240c:	469e      	mov	lr, r3
 800240e:	4770      	bx	lr

08002410 <_fini>:
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002416:	bc08      	pop	{r3}
 8002418:	469e      	mov	lr, r3
 800241a:	4770      	bx	lr
